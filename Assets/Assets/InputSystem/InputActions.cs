//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Circle"",
            ""id"": ""173aa119-5b3d-4b7f-b355-36c63ab92eb5"",
            ""actions"": [
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""0109675d-927b-4026-be40-ca9448f43c8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchRelease"",
                    ""type"": ""Button"",
                    ""id"": ""c00bbbda-3651-45d0-a24f-4c5fc75641a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""3dde73e0-48ff-4e7c-8f6c-f5fca7ac3c32"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ba51b79c-23ae-4a4e-9d67-8dcf62b6a964"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""172d708f-fc9b-499e-aa35-bd37bd648f14"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f389a1a6-aaab-44e1-9863-9632c9e0914b"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Screen"",
            ""bindingGroup"": ""Screen"",
            ""devices"": []
        }
    ]
}");
        // Circle
        m_Circle = asset.FindActionMap("Circle", throwIfNotFound: true);
        m_Circle_TouchPress = m_Circle.FindAction("TouchPress", throwIfNotFound: true);
        m_Circle_TouchRelease = m_Circle.FindAction("TouchRelease", throwIfNotFound: true);
        m_Circle_TouchPosition = m_Circle.FindAction("TouchPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Circle
    private readonly InputActionMap m_Circle;
    private List<ICircleActions> m_CircleActionsCallbackInterfaces = new List<ICircleActions>();
    private readonly InputAction m_Circle_TouchPress;
    private readonly InputAction m_Circle_TouchRelease;
    private readonly InputAction m_Circle_TouchPosition;
    public struct CircleActions
    {
        private @InputActions m_Wrapper;
        public CircleActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPress => m_Wrapper.m_Circle_TouchPress;
        public InputAction @TouchRelease => m_Wrapper.m_Circle_TouchRelease;
        public InputAction @TouchPosition => m_Wrapper.m_Circle_TouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_Circle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CircleActions set) { return set.Get(); }
        public void AddCallbacks(ICircleActions instance)
        {
            if (instance == null || m_Wrapper.m_CircleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CircleActionsCallbackInterfaces.Add(instance);
            @TouchPress.started += instance.OnTouchPress;
            @TouchPress.performed += instance.OnTouchPress;
            @TouchPress.canceled += instance.OnTouchPress;
            @TouchRelease.started += instance.OnTouchRelease;
            @TouchRelease.performed += instance.OnTouchRelease;
            @TouchRelease.canceled += instance.OnTouchRelease;
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
        }

        private void UnregisterCallbacks(ICircleActions instance)
        {
            @TouchPress.started -= instance.OnTouchPress;
            @TouchPress.performed -= instance.OnTouchPress;
            @TouchPress.canceled -= instance.OnTouchPress;
            @TouchRelease.started -= instance.OnTouchRelease;
            @TouchRelease.performed -= instance.OnTouchRelease;
            @TouchRelease.canceled -= instance.OnTouchRelease;
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
        }

        public void RemoveCallbacks(ICircleActions instance)
        {
            if (m_Wrapper.m_CircleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICircleActions instance)
        {
            foreach (var item in m_Wrapper.m_CircleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CircleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CircleActions @Circle => new CircleActions(this);
    private int m_ScreenSchemeIndex = -1;
    public InputControlScheme ScreenScheme
    {
        get
        {
            if (m_ScreenSchemeIndex == -1) m_ScreenSchemeIndex = asset.FindControlSchemeIndex("Screen");
            return asset.controlSchemes[m_ScreenSchemeIndex];
        }
    }
    public interface ICircleActions
    {
        void OnTouchPress(InputAction.CallbackContext context);
        void OnTouchRelease(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
    }
}
